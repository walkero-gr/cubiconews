<?php
/**
 * @file
 * Cubiconews module file
 *
 * Created by George Sokianos (walkero@gmail.com)
 *
 */

// THESE ARE OBSOLETE AND SHOULD BE REMOVED
//define('CUBICONEWS_CRON_SEND_TIME', '23:00:00');
//define('CUBICONEWS_MAX_DCC', '2');


/**
 * Implements hook_permission().
 */
function cubiconews_permission() {
  return array(
    'administer cubiconews' => array(
      'title' => t('Administer Cubiconews'),
      'description' => t('Perform administrative actions with Cubiconews Newsletter system.'),
    ),
    'create cubiconews newsletter' => array(
      'title' => t('Create newsletter'),
      'description' => t('Allows access to newsletters.')
    ),
    'administer cubiconews emails' => array(
      'title' => t('Administer emails'),
      'description' => t('Allow access to the receipients emails.'),
    ),
    'send cubiconews newsletter' => array(
      'title' => t('Send a newsletter'),
      'description' => t('Allow access to send a newsletter to the receipients.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function cubiconews_menu() {

  // Admin pages
  $items['admin/config/content/cubiconews'] = array(
    'title' =>  t('CubicoNews Administration'),
    'description' => 'Configure CubicoNews',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cubiconews_admin_preferences_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer cubiconews'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cubiconews.admin.inc',
    'file path' => drupal_get_path('module', 'cubiconews'),
    'menu_name' => 'management',
    'weight' => 0,
  );
  $items['admin/config/content/cubiconews/config'] = array(
    'title' => 'Config',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/content/cubiconews/newsletters'] = array(
    'title' => 'Newsletters',
    'description' => 'Manage Cubiconews Newsletters.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cubiconews_newsletters_form'),
    'access arguments' => array('create cubiconews newsletter'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cubiconews.admin.inc',
    'file path' => drupal_get_path('module', 'cubiconews'),
    'menu_name' => 'management',
    'weight' => 2
  );
  $items['admin/config/content/cubiconews/emails'] = array(
    'title' => t('Recipients'),
    'description' => t('Manage your newsletter recipients'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cubiconews_emails_form'),
    'access arguments' => array('administer cubiconews emails'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cubiconews.admin.inc',
    'file path' => drupal_get_path('module', 'cubiconews'),
    'weight' => 3
  );
  $items['admin/config/content/cubiconews/addemails'] = array(
    'title' => t('Import Emails'),
    'description' => t('Import new recipients from a list of emails'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cubiconews_addemails_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer cubiconews emails'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cubiconews.admin.inc',
    'file path' => drupal_get_path('module', 'cubiconews'),
    'weight' => 4
  );
  $items['admin/config/content/cubiconews/removeemails'] = array(
    'title' => t('Remove Emails'),
    'description' => t('Remove recipients from the list'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cubiconews_removeemails_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer cubiconews emails'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cubiconews.admin.inc',
    'file path' => drupal_get_path('module', 'cubiconews'),
    'weight' => 5
  );
  $items['admin/config/content/cubiconews/%/send'] = array(
    'title' => t('Send newsletter'),
    'description' => t('Send or schedule when the newsletter should be send'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cubiconews_newsletter_send_form'),
    'access callback' => 'user_access',
    'access arguments' => array('send cubiconews newsletter'),
    'type' => MENU_CALLBACK,
    'file' => 'cubiconews.admin.inc',
    'file path' => drupal_get_path('module', 'cubiconews'),
  );




  // Front-End pages
  $items['cubiconews/registration_success'] = array(
    'title' => t('Succesful subscription'),
    'page callback' => '_cubiconews_register_ok',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['cubiconews/unsubscribe'] = array(
    'title' => t('Unsubscribe from our Newsletter'),
    'description' => t('Remove your email from our Newsletter receivers'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cubiconews_newsletter_remove_email_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cubiconews/removal_success'] = array(
    'title' =>  t('Succesful subscription removal'),
    'page callback' => '_cubiconews_email_remove_ok',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['node/%node/cubiconews_add'] = array(
    'page callback' => 'cubiconews_add_node',
    'page arguments' => array(1),
    'access callback' => '_check_node_user_access',
    'access arguments' => array(1),
    'title' => t('Add to Newsletter'),
    //'title callback' => 'cubiconews_action_link_title',
    //'title arguments' => array(1),
    'weight' => 10,
    'file' => 'cubiconews.pages.inc',
    'type' => MENU_LOCAL_TASK,
    //'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['newsletter/%'] = array(
    'title' =>  t('Newsletter'),
    'page callback' => '_cubiconews_headless_newsletter',
    'access callback' => true
  );
  $items['newsletter/trck'] = array(
    'title' =>  t('Newsletter'),
    'page callback' => '_cubiconews_tracking_pixel',
    'access callback' => true
  );

  return $items;
}


function cubiconews_access($node){
	return true;
}


/*
 * Check if the user has access to add an article to cubiconews by clone
 * and if the node type is configured from the CubiConews prefrences
 * to have the clone link at the top
 */
function _check_node_user_access($node){
	global $user;
	$access = FALSE;
	$nodeavailability = variable_get('cubiconews_config_selected_contenttypes', array());

	if(user_access('create cubiconews newsletter')) {
		if(array_search($node->type, $nodeavailability, true)) {
			$access = TRUE;
		} else {
			$access = FALSE;
		}
	} else {
		$access = FALSE;
	}

	return $access;
}




/**
 * OBSOLETE
 * Menu title callback.
 */
//function cubiconews_action_link_title($node) {
  // A hack to present a shorter title in contextual links.
//  if (current_path() != 'node/' . $node->nid) {
//    return t('Cubiconews');
//  }
  //if (variable_get('clone_use_node_type_name', 0)) {
   // return t('cubiconews this !type', array('!type' => drupal_strtolower(node_type_get_name($node))));
  //}
//  return t('Add to Newsletter');
//}


/**
 * Implements hook_image_default_styles().
 */
function cubiconews_image_default_styles() {
  $styles = array();
  $styles['newsletter_thumb'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 540, 'height' => 282),
        'weight' => 0,
      ),
    )
  );
  return $styles;
}



/**
 * Implements hook_block_info().
 */
function cubiconews_block_info() {
  $blocks['cubiconews_register_email'] = array(
    'info' => t('Cubiconews: Visitors register their email'),
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function cubiconews_block_configure($delta = '') {
  $form = array();
  if ($delta == 'cubiconews_register_email') {
    $form['block_cubiconews_email_string'] = array(
      '#type' => 'textfield',
      '#title' => t('Block message'),
      '#size' => 60,
      '#description' => t('This text will appear in the newsletter block.'),
      '#default_value' => variable_get('block_cubiconews_email_string',  t('Insert here your email if you want to receive our Newsletter.')),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function cubiconews_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'cubiconews_register_email') {
    // Have Drupal save the string to the database.
    variable_set('block_cubiconews_email_string', $edit['block_cubiconews_email_string']);
  }
  return;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function cubiconews_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  switch ($delta) {
    case 'cubiconews_register_email':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Newsletter');
      $block['content'] = drupal_get_form('cubiconews_register_block_form');
      break;
  }
  return $block;
}


function cubiconews_register_block_form($form, &$form_submit){
	$form = array();
	$form['block_message'] =array(
		'#markup' => variable_get('block_cubiconews_email_string',  t('Insert here your email if you want to receive our Newsletter.')),
	);
	$form['block_field'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#size' => 20,
		'#maxlength' => 60,
		'#default_value' => '',
		'#required' => true
	);

	$form['btn_submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#name' => 'save',
	);

	return $form;
}

/**
 * Submit handler for cubiconews_register_block_form().
 */
function cubiconews_register_block_form_submit($form, &$form_state) {
	$email_address = $form_state['values']['block_field'];
	_register_email($email_address);
	drupal_goto('cubiconews/registration_success');
}


/**
 * Validation handler for cubiconews_register_block_form().
 */
function cubiconews_register_block_form_validate($form, &$form_state) {
	$email_address = $form_state['values']['block_field'];

	if (strlen(trim($email_address)) > 0) {
		if (!preg_match("/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/i", $email_address)) {
			form_set_error('block_field', t('Your email address is not valid.'));
		}
	}

}


function _cubiconews_newsletter_remove_email_form ($form, &$form_submit){
	$form = array();
	$form['block_message'] =array(
		'#markup' => t('In case you do not want to receive our newsletters anymore, insert your email at the following field to unsubscribe.'),
	);
	$form['block_field'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#size' => 20,
		'#maxlength' => 60,
		'#default_value' => '',
		'#required' => true
	);

	$form['btn_submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#name' => 'save',
	);

	return $form;
}
function _cubiconews_newsletter_remove_email_form_validate ($form, &$form_state){
	$email_address = $form_state['values']['block_field'];

	if (strlen(trim($email_address)) > 0) {
		if (!preg_match("/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/i", $email_address)) {
			form_set_error('block_field', t('Your email address is not valid.'));
		}
	}
}
function _cubiconews_newsletter_remove_email_form_submit ($form, &$form_state){
	$email_address = $form_state['values']['block_field'];
	$disable_email = db_update('cubiconews_emails')
			->fields(array(
					'status' => 0
				))
			->condition('email', $email_address, '=')
			->execute();

	drupal_goto('cubiconews/removal_success');
}


/**
 * Implements hook_cron().
 *
 */
function cubiconews_cron() {

	// $curtimestamp = time();
	// $send_timestamp = mktime(0,10,0, date('m'), date('d'), date('Y'));
	// if($curtimestamp >= $send_timestamp) {
  //
	// 	// Get the latest unsent newsletter
	// 	$get_newsletters = db_select('cubiconews_newsletters', 'cubn')
	//         ->fields('cubn')
	// 		->condition('status', 0,'=')
	// 		->orderBy('newsid', 'ASC')
	// 		->range(0,1);
	// 	$newsletters_rs = $get_newsletters->execute();
	// 	$newsletters_row = $newsletters_rs->fetchAssoc();
	// 	$cur_newsletter_id = $newsletters_row['newsid'];
	// 	_cubiconews_cron_bcc_send($cur_newsletter_id);
	// 	//_cubiconews_cronsend();
  //
	// watchdog('cubiconews', 'Automatic Cron Executed %crontime. Current time %curtime', array('%crontime'=>$send_timestamp, '%curtime' => $curtimestamp), WATCHDOG_INFO);
	// }
}
function cubiconews_cron_queue_info() {
  $queues = array();

	$queues['cubiconews_send_emails_queue'] = array(
    // Queue worker function.
    'worker callback' => '_cubiconews_send_emails_queue_process',
    // The function will be work 10 seconds.
    'time' => 60,
    'skip on cron' => FALSE
  );

  return $queues;
}


function _cubiconews_send_emails_queue_process($data) {
  $data['update_label'] = 'send_email';
  _cubiconews_send_email($data['nid'], $data['data']['email']);
  //_cubiconews_queue_send_emails($data);
}


/*
 *  hook_node_delete
 *
 *  This deletes all the newletter data when it's node is deleted
 */
function cubiconews_node_delete($node) {
  $node_data = node_load($node->nid);

  if($node_data->type == 'cubiconews_item') {
    db_delete('cubiconews_newsletters')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_custom_theme().
 *
 */
function cubiconews_custom_theme() {
	$themed_pages = array(
		'cubiconews/newsletters/emails',
		'cubiconews/newsletters/add',
		'cubiconews/newsletters',
		'cubiconews/newsletters/emails/add'
	);
	$alias = drupal_get_path_alias($_GET['q']);
	if(in_array($alias, $themed_pages)) {
		return variable_get('admin_theme');
	} else {
		return 1;
	}
}


/**
 * Implements hook_theme().
 *
 */
/*
function cubiconews_theme() {
	return array(
		'node_cubiconews_item' => array(
			'template' => 'node-cubiconews-item'
		)
	);
}
*/

/**
 * Implements hook_theme_registry_alter().
 */
function cubiconews_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'cubiconews');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      //krumo($template_file_object);
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}


function _cubiconews_headless_newsletter() {
  $nid = arg(1);
  $mail_text = _cubiconews_newsletter_prepare($nid);
  echo $mail_text;
  exit;
}


/*
    @info This function creates an image 1x1 pixels
      to be used as tracking pixel for the newsletters.
      It updates also the tracking database table to
      record the user who opened the newsletter, for
      statistical reasons.
*/
function _cubiconews_tracking_pixel() {
  // tracnk the opening of the newsletters
  if(!empty(arg(2))) {
    _cubiconews_track_user(arg(2), 'read');
  }

  // Create an image, 1x1 pixel in size
  $im=imagecreate(1,1);

  // Set the background colour
  $white=imagecolorallocate($im,255,255,255);

  // Allocate the background colour
  imagesetpixel($im,1,1,$white);

  // Set the image type
  header("content-type:image/jpg");

  // Create a JPEG file from the image
  imagejpeg($im);

  // Free memory associated with the image
  imagedestroy($im);
  exit;
}


/*
    @info This function updates the cubiconews_tracking when a new
      newsletter is sent, by adding the recipients, and from the
      tracking pixel, when a recipient opens the newsletter.
      This is usefull for tracking by whom and when a newsletter
      is viewed.

    @param  $recipient_hash  string  The MD5 of a string that
      includes the newsletter nodeid and the recipient's email
    @param  $todo  string  Takes values
      'new' to add a new recipient for a newsletter
      'read' when a recipient opened a newsletter, triggered by
        the tracking pixel
    @param  $recipient_mail string  The recipient's email
    @param  $nid  int The nid of the newsletter
    @return nothing
 */
function _cubiconews_track_user($recipient_hash, $todo = 'read', $recipient_mail = NULL, $nid = 0) {
  switch($todo) {
    case 'new':
      $metrics_query = db_merge('cubiconews_tracking')
        ->insertFields(array(
          'nid' => $nid,
          'email' => $recipient_mail,
          'status' => 0,
          'cnt_read' => 0,
          'opened' => '',
          'datahash' => $recipient_hash
        ))
        ->updateFields(array(
          'status' => 0,
          'cnt_read' => 0,
          'opened' => '',
        ))
        ->key(array(
          'datahash' => $recipient_hash
        ))
        ->execute();
      break;
    case 'read':
      $disable_email = db_update('cubiconews_tracking')
        ->fields(array(
            'status' => 1,
            'cnt_read' => 1,
            'opened' => time(),
          ))
        ->condition('datahash', $recipient_hash, '=')
        ->execute();
      break;
  }
}


function _cubiconews_newsletter_prepare($nid) {
  $node = node_load($nid);
  $module_path = drupal_get_path('module', 'cubiconews');
  $template_path = $module_path . '/themes/';

  global $base_url;
  if(!empty($base_url)) {
    $base_link_url = $base_url;
  } else {
    $base_link_url = 'http://localhost:8060';     // @todo add this to config page
  }
  //$newsletter['logo_img_url'] = url('themes/bartik/logo.png', array('absolute' => true, 'base_url' => $base_link_url));
  //$var_logourl = l('<img src="' . $var_logoimg . '" alt="Espressonews.gr Newsletter" title="Espressonews.gr Newsletter">', '<front>', array('html' => true, 'attributes' => array('target' => '_blank')));

  $newsletter['title'] = $node->title;
  $newsletter['url'] = $base_link_url . '/newsletter/' . $nid;
  $newsletter['website_url'] = $base_link_url;

  $articles = array();
  $field_collection_fields = field_get_items('node', $node, 'field_cubiconews_article_group');
  foreach ($field_collection_fields as $field_collection_field) {
    $artc = array();

    $field_collection_item = field_collection_item_load($field_collection_field['value']);

    $field_wrapper = entity_metadata_wrapper('field_collection_item', $field_collection_item);
    $artc['title'] = $field_wrapper->field_cubiconews_article_title->value();
    $image_data = $field_wrapper->field_cubiconews_article_image->value();
    $images_style_url = str_replace('http://default/', '', image_style_url('newsletter_thumb', $image_data['uri']));
    $artc['image_url'] = url($images_style_url, array('absolute' => true, 'base_url' => $base_link_url));
    $artc['body'] = $field_wrapper->field_cubiconews_article_body->value()['value'];
    $article_link = $field_wrapper->field_cubiconews_article_link->value();
    $artc['link'] = url($article_link['url'], array('absolute' => true, 'base_url' => $base_link_url));

    $articles[] = $artc;
  }


  ob_start();
  include($template_path . 'newsletter.php');
  $mail_text = ob_get_contents();
  ob_end_clean();

  return $mail_text;
}


/**
 * Processes variables for themes/node--cubiconews_item.tpl.php
 *
 * The $variables array contains the following arguments:
 * - $node
 * - $view_mode
 * - $page
 *
 * @see themes/node--cubiconews_item.tpl.php
 */
//function template_preprocess_cubiconews_item(&$variables) {

//}


function _cubiconews_register_ok() {
	$output = t('Thank you for your registration. From now on you are going to receive our newsletter emails to your inbox.');     // @todo add this to config page

	return $output;
}


function _cubiconews_email_remove_ok() {
	$output = t('We are sorry you decided to not receive our newsletters any more. We hope to reconsider and register back again.');     // @todo add this to config page

	return $output;
}


function _extract_emails($emailtext) {
	$email = array();
	$invalid_email = array();
 	$pattern = '/[A-Za-z0-9_-]+@[A-Za-z0-9_-]+\.([A-Za-z0-9_-][A-Za-z0-9_]+)/'; //regex for pattern of e-mail address
   	preg_match_all($pattern, $emailtext, $email); //find matching pattern

	return $email;
}


function _register_email($newemail, $enable_existing = true) {
	// Check first if the email already exists in our database
	$chk_email = db_select('cubiconews_emails', 'cube')
    ->fields('cube')
		->condition('email', $newemail,'=')
		->execute();
	$emails_num = $chk_email->rowCount();

  $ret = '';
  if($emails_num == 0) {
		$newsid = db_insert('cubiconews_emails')
		  ->fields(array(
		    'email' => $newemail,
		    'status' => 1,
		    'registration' => time()
		  ))
		  ->execute();
		$ret = 'new';
	} else {
    if($enable_existing) {
  		$enable_email = db_update('cubiconews_emails')
  			->fields(array(
  				'status' => 1,
  	    	'registration' => time(),
  			))
  			->condition('email', $newemail, '=')
  			->execute();
      $ret = 'upd';
    }
	}
	return $ret;
}


function _get_tpl_path() {
	print_r($theme_registry);
	$theme_path = path_to_theme();
	//$theme_path = drupal_get_filename('theme', 'node--cubiconews_item.tpl');
	if(file_exists($theme_path . '/node--cubiconews_item.tpl.php') || file_exists($theme_path . '/templates/node--cubiconews_item.tpl.php')) {
		echo 'file exist';
	} else {
		echo 'file does not exist';
	}

	echo '~~~' . $theme_path;
	//$templates = drupal_find_theme_templates($existing, '.tpl.php', $theme_path);
	//print_r($templates);

}


function _cubiconews_send_email($nid, $recipient_mail) {
  global $base_url;
  if(!empty($base_url)) {
    $base_link_url = $base_url;
  } else {
    $base_link_url = 'http://localhost:8060';     // @todo add this to config page
  }

  $node = node_load($nid);
  $recipient_hash = md5($nid . '~' . $recipient_mail);

	$from = variable_get('system_mail', 'info@intercube.gr');

  $my_module = 'cubiconews';
  $my_mail_token = 'cubiconews_mailkey'; //microtime();

  $mail_text = _cubiconews_newsletter_prepare($nid);

  // Add the tracking pixel
  $tracking_pixel_tag = '<img src="' . $base_link_url . '/newsletter/trck/' . $recipient_hash . '" width="1" height="1">';
  $mail_text = str_replace('<!--tracking_pixel-->', $tracking_pixel_tag, $mail_text);

  $message = array(
    'id' => $my_module . '_' . $my_mail_token,
    'key' => $my_mail_token,
    'from' => $from,
    'to' => $recipient_mail,
    'subject' => $node->title,
    'body' => array($mail_text),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8',
      'Content-Transfer-Encoding' => '8Bit',
  		'X-Mailer' => 'Drupal'
    )
  );

  $system = drupal_mail_system('cubiconews', $my_mail_token);
  $message = $system->format($message);
  $result = $system->mail($message);

  // Add the user for tracking as a new recipient for this newsletter
  _cubiconews_track_user($recipient_hash, 'new', $recipient_mail, $nid);

}
